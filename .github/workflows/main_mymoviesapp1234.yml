name: Build_and_Deploy_MyMoviesApp

on:
  push:
    branches:
      - main  # or whatever branch triggers deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1) Check out code
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2) Set up Node to build the Angular front-end
    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # 3) Build the Angular app inside MyApp folder
    - name: Build Angular
      working-directory: MyApp
      run: |
        npm install
        npm run build

    # 4) Set up .NET so we can build & publish the API
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'

    # 5) Copy Angularâ€™s dist output into wwwroot, then publish .NET
    - name: Publish .NET (with Angular content)
      run: |
        # Cleanup old wwwroot
        rm -rf MyMoviesApp.Api/wwwroot/*
        # Copy the Angular dist files
        cp -R MyApp/dist/MyApp/* MyMoviesApp.Api/wwwroot/
        
        dotnet restore MyMoviesApp.sln
        dotnet build MyMoviesApp.sln --configuration Release
        dotnet publish MyMoviesApp.Api/MyMoviesApp.Api.csproj \
            --configuration Release \
            --output publish

    # 6) Log in to Azure (requires secret AZURE_CREDENTIALS)
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # 7) Deploy published output to Azure Web App
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        # This must match your actual Azure Web App name exactly
        app-name: "mymoviesapp1234"
        package: "./publish"
